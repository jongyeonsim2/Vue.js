1. Vue.js란?
   웹 페이지 화면을 개발하기 위한 프런트엔드 프레임워크

2. Vue.js 특징
   - UI 화면 개발 방법 중 하나의 MVVM 패턴의 화면단의
     라이브러리.
   - 구조
     view <-> Vue.js <-> Model <-> Back End
     
     view : html, DOM
     Vue.js : DOM Listener, Data Binding
     Model : javaScript Object( 서버에서 가져온 데이터 )
   - 각 요소에 대한 상세한 설명
     뷰(View) : 사용자에게 보이는 화면
     DOM : html 문서에 들어가는 요소의 정보를 가지고 있는 데이터 트리
     DOM Listener 
         DOM 의 변경 내역에 대해서 즉각적으로 반응하여
         특정 로직을 수행하는 장치
     Data Binding
         뷰(View)에 표시되는 내용과 모델의 데이터를 동기화
     모델(Model)
         서버에서 가져온 데이터를 자바스크립트 객체 형태로 저장
     뷰 모델(Vue.js)
         뷰와 모델의 중간 영역. 돔리스너와 데이터 바인딩을 제공하는 영역   
   - 컴포넌트 기반 프레임워크
     컴포넌트 : 목적별, 기능별로 구분해서 개발하는 단위.
               html tree(DOM) => 부모 자식 관계의 구조
                   부모(상위 컴포넌트), 자식(하위 컴포넌트)

     html 구조화 : Header, Content( Aside, List ), Footer

3. Vue.js 환경 설정
   - Node.js
     node -v 입력해서 설치 확인

   - 크롬 브라우저
     vue.js devtools

   - VS code
     Vue 3 Snippets
     Volar

   - toDo project 실행해보려고 함.
     npm install vue-cli -global

     vue

     npm install

     npm run dev


3. Vue 인스턴스
   3.1 Vue 인스턴스의 속성
       - el
       - data
       - template 
         화면에 표시할 HTML, CSS 등의 마크업 요소를 정의하는 속성.
       - methods
         이벤트 처리용 메소드를 정의하는 속성.
       - created
         뷰 인스턴스의 라이프 사이클과 관련됨.
         뷰 인스턴스가 생성이 되자마자 실행할 로직을 작성하는 속성.

   3.2 Vue 인스턴스 과정
       - 뷰 라이브러리 로딩
       - 뷰 인스턴스 객체 생성( 속성 포함 )
       - 해당되는 DOM 요소와 생성된 뷰 인스턴스 객체가 연결됨.
       - 뷰 인스턴스의 내용이 해당 DOM 요소에 적용( 화면에 적용 )
       - 사용자가 눈으로 내용을 최종적으로 확인 가능

   3.3 Vue LifeCycle ( Vue 객체 자신의 이벤트 )
       LifeCycle 상에서 실행되는 로직 => LifeCycle Hook

       인스턴스 생성
          beforeCreated
          created ( 중요 )
            - 컴포넌트가 생성되고 나서 실행됨.
            - 서버에 데이터를 요청하여 받아오는 로직을 수행하기에 좋음.
          beforeMount
          mounted ( 중요 )
            - 화면 요소에 인스턴스가 부착되고 나면 호출됨.
            - template 속성에 정의한 화면 요소에 접근이 가능하여
             화면 요소를 제어하는 로직을 수행하기 좋은 단계임.
       인스턴스를 화면에 부착
          beforeUpdate
          updated ( 중요 )
            - 데이터가 변경되고 나서 가상 돔으로 다시 화면을 그리고 나면 실행됨.
            - 데이터 변경 후 화면 요소 제어와 관련된 로직을 추가하기 좋은 단계임.
            - 하위 컴포넌트의 화면 요소와 외부 라이브러리에 의해 최종 변환 시점이
              다를 가능성이 있으므로, 변환이 완료될 때까지 기다렸다가 로직을 
              처리하기 위해서 $nextTick() 을 사용함.
       인스턴스 내용 갱신
          beforeDestory
          destoryed
       인스턴스 소멸


4. Vue 컴포넌트
   4.1 컴포넌트
       화면을 구성할 수 있는 블록( 화면의 특정 영역 )

       컴포넌트 간의 관계는 뷰에서 화면을 구성하는데 매우 중요한 역할을 함.

   4.2 컴포넌트 등록
       4.2.1. 전역 컴포넌트
       4.2.2. 지역 컴포넌트




