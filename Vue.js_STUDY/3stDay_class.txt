1. 실전 Vue application 개발
   1.1 todo project ( CRD )
       - html 요소는 모두 컴포넌트로 관리
       - 모듈화 기반에서 이벤트 처리
       - 모듈화(컴포넌트) : Vue file로 작성
         Header, TodoInput, TodoList, TodoFooter
       - 모듈의 내부 구성 요소
         template, script, style
       - vue.js, javascript, html, css 를 주 언어가 됨.

   1.2 진행 순서
       - 프로젝트 폴더 생성
       - vue init webpack-simple 
         위의 명령어가 실행이 되지 않으면, 아래의 명령어를 먼저
        실행해서 vue-cli 를 먼저 설치.
         npm i vue-cli -g

         vue init webpack-simple 명령어 실행 후 모두 엔터로 입력
       - npm install ( 관련 라이브러리 다운 )
       - npm run dev
       - Header, TodoInput, TodoList, TodoFooter 모듈 파일 생성
       - 각 모듈에 template, script, style 작성
       - 화면 반영이 되는지 실행.
       - CSS 사전 반영 후 로직 구현.
       - 데이터 저장소 : 브라우저 메모리에 저장.
         중앙 처리 데이터 저장소의 개념이 없는 상태로 코딩. => 문제점

         중앙 처리 데이터 저장소로 반영 => 이벤트 처리, 데이터 전송

   1.3 컴포넌트
       - Header, TodoInput, TodoList, TodoFooter
       - Header : 애플리케이션 이름 표시
       - TodoInput : Todo 입력 및 저장
       - TodoList : ToDo 리스트 표시, 특정 ToDo 삭제
       - TodoFooter : 전체 ToDo 삭제


   1.4 현재 애플리케이션의 문제점
       - 화면 출력용의 배열(todoItems) 은 TodoList.vue 모듈에만 있어
         다른 컴포넌트간의 공유가 되지 않고 있음.

         Footer 컴포넌트에서 전체 데이터 삭제 후, 화면 갱신을 위해서는
         TodoList 컴포넌트에게 localStorage 의 데이터가 삭제되었다는 것을 알려주어야 함.

       - 중앙 집중형식의 데이터 관리가 되고 있지 않음.
       - 개선점1 : App.vue 모듈에서 배열 데이터를 중앙 집중 관리하도록 함.
         개선점2 : 하위 모듈에서 데이터가 변경시, App.vue 모듈에서 알 수 있도록 해야 함.
         개선점3 : 배열 데이터를 필요로 하는 모듈에게는 App.vue 모듈에서 전달하도록 해야 함.
         개선점4 : 배열 데이터 생성 시점은 App.vue 모듈의 created() 생성주기 이벤트에서 수행.

         개선점 1, 2, 3 이 되면, App.vue 모듈에서 데이터가 중앙 집중 관리가 됨.